#+TITLE: Lantern

* Overview
The goal of this project is to create a set of functions that make
exploratory data analysis with common lisp fun and easy. The function
will provide some default behavior for more powerful common lisp libraries:
 - io :: data input and output from to data base
   - using [[https://github.com/AccelerationNet/cl-csv][cl-csv]], [[https://github.com/sshirokov/CLSQL][cl-sql]], [[https://github.com/fukamachi/cl-dbi][cl-dbi]]
 - tidy :: data manipulation
   - using [[https://github.com/AccelerationNet/group-by][group-by]], [[https://gitlab.common-lisp.net/alexandria/alexandria][alexandria]]
 - plot :: summary graphs
   - using [[https://github.com/guicho271828/eazy-gnuplot][eazy-gnuplot]]
 - stats :: summary statistics
   - using [[https://github.com/mrc/lhstats][lhstats]] and [[https://gitlab.common-lisp.net/alexandria/alexandria][alexandria]]

The end result should allow the user to load some data and quickly
manipulate, summarize and visualize.

* Approach
The approach is inspired by clojure incanter, except there will not be a
data-set structure. Instead, plists will be used to manipulate data.

* Todo
  Everything, but here is the initial wish list

** io [0/1]
Functions to create a list of p-lists (lopl)
- [ ] convert strings to numbers when loaded
** tidy [2/5]
Functions to manipulate  a plist
- [X] select rows
- [X] select columns
- [ ] aggregate
- [ ] transform
- [ ] sort
** stats [0/1]
- [ ] frequency
** plots [1/7]
- [ ] bar chart
- [ ] histogram
- [ ] density plot
- [X] scatter plot
- [ ] box plot
- [ ] cumsum plot
- [ ] timeseries plot

* Examples
** Select rows
#+BEGIN_SRC lisp
(->> (load-csv "cars.csv")
     (select-rows '(:and (:> :mpg 15) (:= :cyl 4)
                    (:not (:= :name "Datsun 710")))))
#+END_SRC

** Another approach to selecting rows and columns
#+BEGIN_SRC lisp
(defparameter *car-schema*
  (make-schema
   '((:model string)
     (:mpg number)
     (:cyl number)
     (:disp number)
     (:hp number)
     (:drat number)
     (:wt number)
     (:qsec number)
     (:vs number)
     (:am number)
     (:gear number)
     (:carb number))))

(defparameter *car-db* (load-database "cars.csv" *car-schema*))

(select
 "all entries with the same number of cylinders as a Corrolla"
 :columns '(:model :cyl)
 :from *car-db*
 :where (in :cyl
            (select
             :columns :cyl
             :from *car-db*
             :where (matching *car-db* :model "Toyota Corolla"))))
#+END_SRC
